//importing the telegraf package
const { Telegraf } = require("telegraf");

//creating an instanse of bot using the telegraf constructor and included the API token
const bot = new Telegraf("5923084192:AAFohRBPSJfPf1jZ7f8h_aG8_jULCJ3L7q0");

let requestedService = "";
let employerPhone = "";
let gigDescription = "";
// let employerLocation = "";


const goodayOn =
    "üíÅ <b>GoodayOn</b>  - <i>is a gig platform that connects a skilled professionals with individuals and bussiness in need of their services.</i>\n\n·åâ·ã≥·ã≠·ä¶·äï ·â†·âÖ·à≠·â• ·à≠·âÄ·âµ ·àã·ã≠ ·ã®·àö·åà·äô ·ä†·åà·àç·åç·àé·âµ ·à∞·å™ (·â£·àà·àô·ã´) \n·à∞·à´·â∞·äû·âΩ ·ä•·äì ·ä†·åà·àç·åç·àé·âµ ·çà·àã·åä (·â∞·å†·âÉ·àö·ãé·âΩ·äï) ·â†·âÄ·àã·àâ ·ã®·àö·ã´·åà·äì·äù ·ã®·àû·â£·ã≠·àç ·àò·â∞·åç·â†·à™·ã´ ·äê·ãç·ç¢";

const helpMessage = `
Use this commands to communicate
/start - starts the bot (·àà·àõ·àµ·åÄ·àò·à≠)
/serviceProviderRequest - for requesting service provider (·â£·àà·àô·ã´/·à∞·à´·â∞·äõ ·àà·àò·å†·ã≠·âÖ)
/register - to register as a Service Provider (·ä•·äï·ã∞ ·â£·àà·àô·ã´ ·àà·àò·àò·ãù·åà·â•)
/help - for command referense (·ä•·åà·ãõ ·àà·àõ·åç·äò·âµ)
`;

const regsiterInfo = `
‚ÑπÔ∏è If you are a service provider and want to find clients by promoting your work on goodayOn, important information you should send:\n
·ä†·åà·àç·åç·àé·âµ ·à∞·å™ ·ä®·àÜ·äë ·ä•·äì ·àµ·à´·ãé·âµ·äï ·â†·åâ·ã≥·ã≠ ·àã·ã≠ ·â†·àõ·àµ·â∞·ãã·ãà·âÖ ·ã∞·äï·â†·äû·âΩ·äï ·àõ·åç·äò·âµ ·ã®·àö·çà·àç·åâ ·ä®·àÜ·äê ·àò·àã·ä≠ ·ã®·àö·åà·â£·ãé·âµ ·ä†·àµ·çà·àã·åä ·àò·à®·åÉ·ãé·âΩ·ç°\n
-------------------------------------------------------- 
 1- Profile picture (·ä®·âµ·ä®·àª ·â†·àã·ã≠ ·ã®·â∞·äê·à≥ ·çä·âµ ·ã®·àö·ã´·à≥·ã≠ ·çé·â∂)·ç£\n 
 2- ID picture (·ã®·àò·â≥·ãà·âÇ·ã´·ç£ ·àò·äï·åÉ ·çç·âÉ·ãµ·ç£ ·çì·àµ·çñ·à≠·âµ ·çé·â∂) ·ä•·äì \n 
 3- Phone number (·àµ·àç·ä≠ ·âÅ·å•·à≠)
`

// Initiated when the user /start
bot.command("start", (ctx) => {
    ctx.reply(
        "Hello" +
        " " +
        ctx.from.first_name +
        " " +
        "üëã Welcome to GoodayOn telegram bot ü§ñ"
    );
    ctx.telegram.sendMessage(ctx.chat.id, goodayOn, { parse_mode: "HTML" }, {
        reply_markup: {
            inline_keyboard: [
                [{ text: "GoodayOn Website", url: "https://gooday.io" }],
            ],
        },
    });
    ctx.reply(helpMessage);
});

//help command refferense
bot.help((ctx) => {
    ctx.reply(helpMessage);
});

//Service provider request
bot.command("serviceProviderRequest", (ctx) => {
    ctx.telegram.sendMessage(
        ctx.chat.id,
        "What type of service provider did you want? \n·ã®·àö·çà·àç·åâ·âµ·äï ·ã®·â£·àà·àô·ã´ ·ä†·ã≠·äê·âµ ·ã≠·àù·à®·å°", {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: "üßë‚Äçüç≥HomeChores \n(·ã®·â§·âµ ·ãç·àµ·å• ·àµ·à´ ·ä•·à≠·ã≥·â≥ ·â£·àà·àô·ã´)",
                        callback_data: "homeChores",
                    }, ],
                    [{
                        text: "üõ†Ô∏èIn-home Technicians & maintenance \n(·ã®·â¥·ä≠·äí·àΩ·ã´·äï ·å•·åà·äì ·â£·àà·àô·ã´)",
                        callback_data: "technicianWorkers",
                    }, ],
                    [{
                        text: "üë∑‚Äç‚ôÇÔ∏èConstruction & Finishing \n(·åç·äï·â£·â≥ ·çä·äï·àΩ·äï·åç ·ä•·äì ·å•·åà·äì ·â£·àà·àô·ã´)",
                        callback_data: "constructionWorkers",
                    }, ],
                    [{
                        text: "üßë‚ÄçüíºBusiness Operation \n(·àà·äï·åç·ãµ ·àµ·à´ ·ä†·àµ·çà·àã·åä ·â£·àà·àô·ã´)",
                        callback_data: "businessOperation",
                    }, ],
                ],
            },
        }
    );
});

//for homeMaid SPs...
bot.action("homeChores", (ctx) => {
    ctx.deleteMessage();
    ctx.telegram.sendMessage(
        ctx.chat.id,
        "Home Maid Service Providers \n(·ã®·â§·âµ ·ãç·àµ·å• ·àµ·à´ ·ä•·à≠·ã≥·â≥ ·â£·àà·àô·ã´)", {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "Cooking Maid (·ã®·â§·âµ ·àù·åç·â• ·à∞·à´·â∞·äõ)", callback_data: "cooking-maid" },
                        { text: "Cleaning Maid(·ã®·åΩ·ã≥·âµ ·â£·àà·àô·ã´)", callback_data: "cleaning-maid" },
                    ],
                    [
                        { text: "Nanny(·àû·åç·ãö·âµ)", callback_data: "nanny" },
                        { text: "Catering(·ã®·àù·åç·â• ·ãù·åç·åÖ·âµ ·â£·àà·àô·ã´)", callback_data: "catering" },
                    ],
                    [
                        { text: "Chauffer(·àπ·çå·à≠)", callback_data: "chauffer" },
                        { text: "Tutor(·ä†·àµ·å†·äö)", callback_data: "tutor" },
                    ],
                    //Go back menu
                    [{ text: "üîôGo back (·ãà·ã∞·ãã·äì·ãç ·ãù·à≠·ãù·à≠ ·ã≠·àò·àà·à±)", callback_data: "go_back" }, ]
                ],
            },
        }
    );
});

//for technician SPs...
bot.action("technicianWorkers", (ctx) => {
    ctx.deleteMessage();
    ctx.telegram.sendMessage(
        ctx.chat.id,
        "Technicians & maintenance \n(·ã®·â¥·ä≠·äí·àΩ·ã´·äï ·å•·åà·äì ·â£·àà·àô·ã´)", {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "Satellite Dish Tech (·ã®·ã≤·àΩ ·â£·àà·àô·ã´)", callback_data: "satellite-dish" },
                        { text: "Electrician (·ä§·àå·ä≠·âµ·à™·ä≠ ·à∞·à´·â∞·äõ)", callback_data: "electrician" },
                    ],
                    [
                        { text: "Plumber(·ã®·âß·äï·âß ·à∞·à´·â∞·äõ)", callback_data: "plumber" },
                        { text: "Electronics Repair(·ã®·ä§·àå·ä≠·âµ·àÆ·äí·ä≠·àµ ·å•·åà·äì)", callback_data: "electronics-repair" },
                    ],
                    [
                        { text: "Computer tech(·ã®·äÆ·àù·çí·ãç·â∞·à≠ ·å•·åà·äì ·â£·àà·àô·ã´)", callback_data: "computer-tech" },
                        {
                            text: "Home Appliance Repair \n(·çç·à™·åÖ·ç£·àù·å£·ãµ·ç£ ·àç·â•·àµ-·àõ·å†·â¢·ã´ ·å•·åà·äì)",
                            callback_data: "home-repair",
                        },
                    ],
                    //Go back menu
                    [{ text: "üîôGo back (·ãà·ã∞·ãã·äì·ãç ·ãù·à≠·ãù·à≠ ·ã≠·àò·àà·à±)", callback_data: "go_back" }, ]
                ],
            },
        }
    );
});

//for construction SPs...
bot.action("constructionWorkers", (ctx) => {
    ctx.deleteMessage();
    ctx.telegram.sendMessage(
        ctx.chat.id,
        "Construction & Finishing \n(·åç·äï·â£·â≥ ·çä·äï·àΩ·äï·åç ·ä•·äì ·å•·åà·äì ·â£·àà·àô·ã´)", {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "Construction worker(·ã®·åç·äï·â†·äõ ·â£·àà·àô·ã´)", callback_data: "construction" },
                        { text: "Aluminium worker(·ã®·ä†·àç·àô·äí·ã®·àù ·à∞·à´·â∞·äõ)", callback_data: "aluminium" },
                    ],
                    [
                        { text: "Gypsum worker(·ã®·åÇ·çï·à∞·àù ·à∞·à´·â∞·äõ)", callback_data: "gypsum" },
                        { text: "Painting(·ã®·âÄ·àà·àù ·âÄ·â¢ ·â£·àà·àô·ã´)", callback_data: "painting" },
                    ],
                    //Go back menu
                    [{ text: "üîôGo back (·ãà·ã∞·ãã·äì·ãç ·ãù·à≠·ãù·à≠ ·ã≠·àò·àà·à±)", callback_data: "go_back" }, ]
                ],
            },
        }
    );
});

//for bussiness operation SPs...
bot.action("businessOperation", (ctx) => {
    ctx.deleteMessage();
    ctx.telegram.sendMessage(
        ctx.chat.id,
        "Business Operation \n(·àà·äï·åç·ãµ ·àµ·à´ ·ä†·àµ·çà·àã·åä ·â£·àà·àô·ã´)", {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "Errand runner(·åâ·ã≥·ã≠ ·ä†·àµ·çà·åª·àö)", callback_data: "errand" },
                        { text: "Salesman(·ã®·àΩ·ã´·å≠ ·à∞·à´·â∞·äõ)", callback_data: "salesman" },
                    ],
                    [{ text: "Accountant(·ã®·àÇ·à≥·â• ·à∞·à´·â∞·äõ)", callback_data: "accountant" }],
                    //Go back menu
                    [{ text: "üîôGo back (·ãà·ã∞·ãã·äì·ãç ·ãù·à≠·ãù·à≠ ·ã≠·àò·àà·à±)", callback_data: "go_back" }, ]
                ],
            },
        }
    );
});

//Go Back Menu
bot.action('go_back', ctx => {
    ctx.deleteMessage();
    ctx.telegram.sendMessage(
        ctx.chat.id,
        "What type of service provider did you want?\n ·ã®·àö·çà·àç·åâ·âµ·äï ·ã®·â£·àà·àô·ã´ ·ä†·ã≠·äê·âµ ·ã≠·àù·à®·å° ", {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: "üßë‚Äçüç≥HomeChores \n(·ã®·â§·âµ ·ãç·àµ·å• ·àµ·à´ ·ä•·à≠·ã≥·â≥ ·â£·àà·àô·ã´)",
                        callback_data: "homeChores",
                    }, ],
                    [{
                        text: "üõ†Ô∏èIn-home Technicians & maintenance \n(·ã®·â¥·ä≠·äí·àΩ·ã´·äï ·å•·åà·äì ·â£·àà·àô·ã´)",
                        callback_data: "technicianWorkers",
                    }, ],
                    [{
                        text: "üë∑‚Äç‚ôÇÔ∏èConstruction & Finishing \n(·åç·äï·â£·â≥ ·çä·äï·àΩ·äï·åç ·ä•·äì ·å•·åà·äì ·â£·àà·àô·ã´)",
                        callback_data: "constructionWorkers",
                    }, ],
                    [{
                        text: "üßë‚ÄçüíºBusiness Operation \n(·àà·äï·åç·ãµ ·àµ·à´ ·ä†·àµ·çà·àã·åä ·â£·àà·àô·ã´)",
                        callback_data: "businessOperation",
                    }, ],
                ],
            },
        }
    );
});


//Register as a service provider
bot.command("register", ctx => {
    ctx.telegram.sendMessage(ctx.chat.id, regsiterInfo, { parse_mode: "HTML" });
})

//handling employers request
let serviceRequest = ['cooking-maid', 'cleaning-maid', 'nanny', 'catering', 'chauffer', 'tutor', 'satellite-dish', 'electrician', 'plumber', 'electronics-repair', 'computer-tech', 'home-repair', 'construction', 'aluminium', 'gypsum', 'painting', 'errand', 'salesman', 'accountant'];
bot.action(serviceRequest, ctx => {
    requestedService = ctx.match.input.toUpperCase();
    // console.log(requestedService);
    ctx.reply("üëçOk " + ctx.from.first_name + " you choosed " + requestedService + " service provider!\n\n‚ÑπÔ∏èNow please tell us a brief description about the gig.\n ·àµ·àà·àö·çà·àç·åâ·âµ ·â£·àà·àô·ã´ ·ä•·äï·ã≤·àÅ·àù ·àµ·àà·àµ·à´·ãç ·â†·âÇ ·ã®·àÜ·äê ·àò·åà·àà·å´ ·ã≠·äï·åà·à©·äï");
    bot.use((ctx) => {
        gigDescription = ctx.message.text;
        console.log(gigDescription)
    });

});

bot.hears('phone', (ctx) => {
    console.log(ctx.from)
    bot.telegram.sendMessage(ctx.chat.id, "Please use 'Share my contact' keyboard button below \nto share your contact number", requestPhoneKeyboard, { parse_mode: "HTML" });
    bot.use((ctx) => {
        employerPhone = ctx.message.contact.phone_number;
    })
})


bot.hears("location", (ctx) => {
    console.log(ctx.from);
    const userName = ctx.from.username;
    bot.telegram.sendMessage(ctx.chat.id, "Please use 'Share my contact'keyboard button below to share your contact number", requestLocationKeyboard);
    bot.use((ctx) => {
        // console.log(ctx.message.location);
        employerLocation = ctx.message.location
    })
})

//constructor for providing phone number to the bot
const requestPhoneKeyboard = {
    "reply_markup": {
        "one_time_keyboard": true,
        "resize_keyboard": true,
        "keyboard": [
            [{
                text: "Share my contact",
                request_contact: true,
                one_time_keyboard: true
            }]
        ]
    }

};

// constructor for proving location to the bot
const requestLocationKeyboard = {
    "reply_markup": {
        "one_time_keyboard": true,
        "resize_keyboard": true,
        "keyboard": [
            [{
                text: "My location",
                request_location: true,
                one_time_keyboard: true
            }],
            ["Cancel"]
        ]
    }

}


bot.launch();